{"version":3,"file":"BacktestingView-ec2f447f.js","sources":["../../src/components/ftbot/BacktestHistoryLoad.vue","../../src/components/ftbot/TradeListNav.vue","../../src/components/ftbot/BacktestResultChart.vue","../../src/components/ftbot/BacktestResultSelect.vue","../../src/components/ftbot/BacktestResultPeriodBreakdown.vue","../../src/components/ftbot/BacktestResultAnalysis.vue","../../src/components/ftbot/FreqaiModelSelect.vue","../../src/stores/btStore.ts","../../src/components/ftbot/BacktestRun.vue","../../src/views/BacktestingView.vue"],"sourcesContent":["<template>\n  <div>\n    <button\n      class=\"btn btn-secondary float-end\"\n      title=\"Refresh\"\n      aria-label=\"Refresh\"\n      @click=\"botStore.activeBot.getBacktestHistory\"\n    >\n      <i-mdi-refresh />\n    </button>\n    <p>\n      Load Historic results from disk. You can click on multiple results to load all of them into\n      freqUI.\n    </p>\n    <b-list-group v-if=\"botStore.activeBot.backtestHistoryList\" class=\"ms-2 mb-1\">\n      <b-list-group-item\n        v-for=\"(res, idx) in botStore.activeBot.backtestHistoryList\"\n        :key=\"idx\"\n        class=\"d-flex justify-content-between align-items-center py-1 pe-2\"\n        button\n        :disabled=\"res.run_id in botStore.activeBot.backtestHistory\"\n        @click=\"botStore.activeBot.getBacktestHistoryResult(res)\"\n      >\n        <strong>{{ res.strategy }}</strong>\n        backtested on: {{ timestampms(res.backtest_start_time * 1000) }}\n        <small>{{ res.filename }}</small>\n        <InfoBox\n          v-if=\"botStore.activeBot.botApiVersion >= 2.32\"\n          :class=\"res.notes ? 'opacity-100' : 'opacity-0'\"\n          :hint=\"res.notes ?? ''\"\n        ></InfoBox>\n        <b-button\n          v-if=\"botStore.activeBot.botApiVersion >= 2.31\"\n          class=\"ms-1\"\n          size=\"sm\"\n          title=\"Delete this Result.\"\n          :disabled=\"res.run_id in botStore.activeBot.backtestHistory\"\n          @click.stop=\"deleteBacktestResult(res)\"\n        >\n          <i-mdi-delete />\n        </b-button>\n      </b-list-group-item>\n    </b-list-group>\n  </div>\n  <MessageBox ref=\"msgBox\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue';\nimport MessageBox, { MsgBoxObject } from '@/components/general/MessageBox.vue';\nimport { timestampms } from '@/shared/formatters';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { BacktestHistoryEntry } from '@/types';\nimport InfoBox from '../general/InfoBox.vue';\n\nconst botStore = useBotStore();\nconst msgBox = ref<typeof MessageBox>();\n\nonMounted(() => {\n  botStore.activeBot.getBacktestHistory();\n});\n\nfunction deleteBacktestResult(result: BacktestHistoryEntry) {\n  const msg: MsgBoxObject = {\n    title: 'Stop Bot',\n    message: `Delete result ${result.filename} from disk?`,\n    accept: () => {\n      botStore.activeBot.deleteBacktestHistoryResult(result);\n    },\n  };\n  msgBox.value?.show(msg);\n}\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n  <div>\n    <b-list-group>\n      <b-list-group-item\n        button\n        class=\"d-flex flex-wrap justify-content-center align-items-center\"\n        :title=\"'Trade Navigation'\"\n        @click=\"sortNewestFirst = !sortNewestFirst\"\n        >Trade Navigation {{ sortNewestFirst ? '&#8595;' : '&#8593;' }}\n      </b-list-group-item>\n      <b-list-group-item\n        v-for=\"(trade, i) in sortedTrades\"\n        :key=\"trade.open_timestamp\"\n        button\n        class=\"d-flex flex-column py-1 pe-1 align-items-stretch\"\n        :title=\"`${trade.pair}`\"\n        :active=\"trade.open_timestamp === selectedTrade.open_timestamp\"\n        @click=\"onTradeSelect(trade)\"\n      >\n        <div class=\"d-flex\">\n          <div class=\"d-flex flex-column\">\n            <div>\n              <span v-if=\"botStore.activeBot.botState.trading_mode !== 'spot'\">{{\n                trade.is_short ? 'S-' : 'L-'\n              }}</span>\n              <DateTimeTZ :date=\"trade.open_timestamp\" />\n            </div>\n            <TradeProfit :trade=\"trade\" class=\"my-1\" />\n            <ProfitPill\n              v-if=\"backtestMode\"\n              :profit-ratio=\"trade.profit_ratio\"\n              :stake-currency=\"botStore.activeBot.stakeCurrency\"\n            />\n          </div>\n          <b-button\n            size=\"sm\"\n            class=\"ms-auto\"\n            variant=\"outline-secondary\"\n            @click=\"ordersVisible[i] = !ordersVisible[i]\"\n            ><i-mdi-chevron-right v-if=\"!ordersVisible[i]\" width=\"24\" height=\"24\" />\n            <i-mdi-chevron-down v-if=\"ordersVisible[i]\" width=\"24\" height=\"24\" />\n          </b-button>\n        </div>\n        <b-collapse v-model=\"ordersVisible[i]\">\n          <ul class=\"px-3 m-0\">\n            <li\n              v-for=\"order in trade.orders?.filter((o) => o.order_filled_timestamp !== null)\"\n              :key=\"order.order_timestamp\"\n            >\n              {{ order.ft_order_side }} {{ order.amount }} at {{ order.safe_price }}\n            </li>\n          </ul>\n        </b-collapse>\n      </b-list-group-item>\n      <b-list-group-item v-if=\"trades.length === 0\">No trades to show...</b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Trade } from '@/types';\nimport TradeProfit from '@/components/ftbot/TradeProfit.vue';\nimport ProfitPill from '@/components/general/ProfitPill.vue';\nimport { computed, ref, watch } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport DateTimeTZ from '@/components/general/DateTimeTZ.vue';\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => Trade[] },\n  backtestMode: { required: false, default: false, type: Boolean },\n});\nconst emit = defineEmits(['trade-select']);\n\nconst botStore = useBotStore();\nconst selectedTrade = ref({} as Trade);\nconst sortNewestFirst = ref(true);\n\nconst onTradeSelect = (trade: Trade) => {\n  selectedTrade.value = trade;\n  emit('trade-select', trade);\n};\n\nconst sortedTrades = computed(() => {\n  return props.trades\n    .slice()\n    .sort((a, b) =>\n      sortNewestFirst.value\n        ? b.open_timestamp - a.open_timestamp\n        : a.open_timestamp - b.open_timestamp,\n    );\n});\n\nconst ordersVisible = ref(sortedTrades.value.map(() => false));\n\nwatch(\n  () => botStore.activeBot.selectedPair,\n  () => {\n    ordersVisible.value = sortedTrades.value.map(() => false);\n  },\n);\n</script>\n\n<style scoped>\n.list-group {\n  text-align: left;\n}\n</style>\n","<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-md-11 text-start\">\n        <p>\n          Graph will always show the latest values for the selected strategy. Timerange:\n          {{ timerange }} - {{ strategy }}\n        </p>\n      </div>\n      <div class=\"col-md-1 text-end\">\n        <b-button\n          aria-label=\"Close\"\n          title=\"Trade Navigation\"\n          size=\"sm\"\n          @click=\"showRightBar = !showRightBar\"\n          >{{ showRightBar ? '&gt;' : '&lt;' }}\n        </b-button>\n      </div>\n    </div>\n    <div class=\"row text-center h-100 d-flex align-items-stretch\">\n      <PairSummary\n        class=\"col-md-2 overflow-auto\"\n        style=\"max-height: calc(100vh - 200px)\"\n        :pairlist=\"pairlist\"\n        :trades=\"trades\"\n        sort-method=\"profit\"\n        :backtest-mode=\"true\"\n      />\n      <CandleChartContainer\n        :available-pairs=\"pairlist\"\n        :historic-view=\"!!true\"\n        :timeframe=\"timeframe\"\n        :timerange=\"timerange\"\n        :strategy=\"strategy\"\n        :trades=\"trades\"\n        :class=\"`${\n          showRightBar ? 'col-md-8' : 'col-md-10'\n        } candle-chart-container px-0 h-100 align-self-stretch`\"\n        :slider-position=\"sliderPosition\"\n        :freqai-model=\"freqaiModel\"\n      >\n      </CandleChartContainer>\n      <TradeListNav\n        v-if=\"showRightBar\"\n        class=\"overflow-auto col-md-2\"\n        style=\"max-height: calc(100vh - 200px)\"\n        :trades=\"trades.filter((t) => t.pair === botStore.activeBot.selectedPair)\"\n        @trade-select=\"navigateChartToTrade\"\n      />\n    </div>\n    <b-card header=\"Single trades\" class=\"row mt-2 w-100\">\n      <TradeList class=\"row trade-history mt-2 w-100\" :trades=\"trades\" :show-filter=\"true\" />\n    </b-card>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport TradeListNav from '@/components/ftbot/TradeListNav.vue';\nimport PairSummary from '@/components/ftbot/PairSummary.vue';\nimport CandleChartContainer from '@/components/charts/CandleChartContainer.vue';\nimport { ref } from 'vue';\nimport { ChartSliderPosition, Trade } from '@/types';\n\ndefineProps({\n  timeframe: { required: true, type: String },\n  strategy: { required: true, type: String },\n  freqaiModel: { required: false, default: undefined, type: String },\n  timerange: { required: true, type: String },\n  pairlist: { required: true, type: Array as () => string[] },\n  trades: { required: true, type: Array as () => Trade[] },\n});\nconst botStore = useBotStore();\nconst showRightBar = ref(true);\nconst sliderPosition = ref<ChartSliderPosition>();\n\nconst navigateChartToTrade = (trade: Trade) => {\n  sliderPosition.value = {\n    startValue: trade.open_timestamp,\n    endValue: trade.close_timestamp,\n  };\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.candle-chart-container {\n  // TODO: Rough estimate - still to fix correctly\n  // Applies to all \"calc\" usages in this file.\n  height: calc(100vh - 250px) !important;\n}\n</style>\n","<template>\n  <div class=\"container d-flex flex-column align-items-stretch\">\n    <h3>Available results:</h3>\n    <b-list-group class=\"ms-2\">\n      <b-list-group-item\n        v-for=\"[key, result] in Object.entries(backtestHistory)\"\n        :key=\"key\"\n        button\n        :active=\"key === selectedBacktestResultKey\"\n        class=\"d-flex justify-content-between align-items-center py-1 pe-1\"\n        @click=\"setBacktestResult(key)\"\n      >\n        <template v-if=\"!result.metadata.editing\">\n          <div class=\"d-flex flex-column me-2 text-start\">\n            <div class=\"fw-bold\">\n              {{ result.metadata.strategyName }} - {{ result.strategy.timeframe }}\n            </div>\n            <div class=\"text-small\">\n              TradeCount: {{ result.strategy.total_trades }} - Profit:\n              {{ formatPercent(result.strategy.profit_total) }}\n            </div>\n            <div v-if=\"canUseModify\" class=\"text-small\" style=\"white-space: pre-wrap\">\n              {{ result.metadata.notes }}\n            </div>\n          </div>\n          <div class=\"d-flex\">\n            <b-button\n              v-if=\"canUseModify\"\n              class=\"flex-nowrap\"\n              size=\"sm\"\n              title=\"Modify\"\n              @click.stop=\"result.metadata.editing = !result.metadata.editing\"\n            >\n              <i-mdi-pencil />\n            </b-button>\n            <b-button\n              size=\"sm\"\n              class=\"flex-nowrap\"\n              title=\"Delete this Result.\"\n              @click.stop=\"emit('removeResult', key)\"\n            >\n              <i-mdi-delete />\n            </b-button>\n          </div>\n        </template>\n        <template v-if=\"result.metadata.editing\">\n          <b-form-textarea v-model=\"result.metadata.notes\" placeholder=\"notes\" size=\"sm\">\n          </b-form-textarea>\n\n          <b-button size=\"sm\" title=\"Confirm\" @click.stop=\"confirmInput(key, result)\">\n            <i-mdi-check />\n          </b-button>\n        </template>\n      </b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { formatPercent } from '@/shared/formatters';\nimport { BacktestResultInMemory, BacktestResultUpdate } from '@/types';\n\ndefineProps({\n  backtestHistory: {\n    required: true,\n    type: Object as () => Record<string, BacktestResultInMemory>,\n  },\n  selectedBacktestResultKey: { required: false, default: '', type: String },\n  canUseModify: { required: false, default: false, type: Boolean },\n});\nconst emit = defineEmits<{\n  selectionChange: [value: string];\n  removeResult: [value: string];\n  updateResult: [value: BacktestResultUpdate];\n}>();\n\nconst setBacktestResult = (key: string) => {\n  emit('selectionChange', key);\n};\n\nfunction confirmInput(run_id: string, result: BacktestResultInMemory) {\n  result.metadata.editing = !result.metadata.editing;\n  if (result.metadata.filename) {\n    emit('updateResult', {\n      run_id: run_id,\n      notes: result.metadata.notes ?? '',\n      filename: result.metadata.filename,\n      strategy: result.metadata.strategyName,\n    });\n  }\n}\n</script>\n\n<style scoped></style>\n","<script setup lang=\"ts\">\nimport { PeriodicBreakdown } from '@/types';\nimport { TableField, TableItem } from 'bootstrap-vue-next';\nimport { computed, ref } from 'vue';\n\ndefineProps({\n  periodicBreakdown: {\n    type: Object as () => PeriodicBreakdown,\n    required: true,\n  },\n});\nconst periodicBreakdownSelections = [\n  { value: 'day', text: 'Days' },\n  { value: 'week', text: 'Weeks' },\n  { value: 'month', text: 'Months' },\n];\n\nconst periodicBreakdownPeriod = ref<string>('month');\n\nconst periodicBreakdownFields = computed<TableField[]>(() => {\n  return [\n    { key: 'date', label: 'Date' },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'loses', label: 'Losses' },\n  ];\n});\n</script>\n\n<template>\n  <b-form-radio-group\n    id=\"order-direction\"\n    v-model=\"periodicBreakdownPeriod\"\n    :options=\"periodicBreakdownSelections\"\n    name=\"radios-btn-default\"\n    size=\"sm\"\n    buttons\n    style=\"min-width: 10em\"\n    button-variant=\"outline-primary\"\n  ></b-form-radio-group>\n  <b-table\n    small\n    hover\n    stacked=\"sm\"\n    :items=\"periodicBreakdown[periodicBreakdownPeriod] as unknown as TableItem[]\"\n    :fields=\"periodicBreakdownFields\"\n  >\n  </b-table>\n</template>\n","<template>\n  <div class=\"px-0 mw-100\">\n    <div class=\"d-flex justify-content-center\">\n      <h3>Backtest-result for {{ backtestResult.strategy_name }}</h3>\n    </div>\n\n    <div class=\"d-flex flex-column text-start ms-0 me-2 gap-2\">\n      <div class=\"d-flex flex-column flex-xl-row\">\n        <div class=\"px-0 px-xl-0 pe-xl-1 flex-fill\">\n          <b-card header=\"Strategy settings\">\n            <b-table\n              small\n              borderless\n              :items=\"backtestResultSettings\"\n              :fields=\"backtestsettingFields\"\n            >\n            </b-table>\n          </b-card>\n        </div>\n        <div class=\"px-0 px-xl-0 pt-2 pt-xl-0 ps-xl-1 flex-fill\">\n          <b-card header=\"Metrics\">\n            <b-table small borderless :items=\"backtestResultStats\" :fields=\"backtestResultFields\">\n            </b-table>\n          </b-card>\n        </div>\n      </div>\n      <b-card header=\"Results per Exit-reason\">\n        <b-table\n          small\n          hover\n          stacked=\"sm\"\n          :items=\"\n            (backtestResult.exit_reason_summary ||\n              backtestResult.sell_reason_summary) as unknown as TableItem[]\n          \"\n          :fields=\"perExitReason\"\n        >\n        </b-table>\n      </b-card>\n      <b-card header=\"Results per pair\">\n        <b-table\n          small\n          hover\n          stacked=\"sm\"\n          :items=\"backtestResult.results_per_pair as unknown as TableItem[]\"\n          :fields=\"perPairFields\"\n        >\n        </b-table>\n      </b-card>\n      <b-card v-if=\"backtestResult.periodic_breakdown\" header=\"Periodic breakdown\">\n        <BacktestResultPeriodBreakdown :periodic-breakdown=\"backtestResult.periodic_breakdown\">\n        </BacktestResultPeriodBreakdown>\n      </b-card>\n\n      <b-card header=\"Single trades\">\n        <TradeList\n          :trades=\"backtestResult.trades\"\n          :show-filter=\"true\"\n          :stake-currency=\"backtestResult.stake_currency\"\n        />\n      </b-card>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport { StrategyBacktestResult, Trade } from '@/types';\nimport BacktestResultPeriodBreakdown from './BacktestResultPeriodBreakdown.vue';\n\nimport { computed } from 'vue';\nimport {\n  timestampms,\n  formatPercent,\n  formatPrice,\n  humanizeDurationFromSeconds,\n  isNotUndefined,\n} from '@/shared/formatters';\nimport { TableField, TableItem } from 'bootstrap-vue-next';\n\nconst props = defineProps({\n  backtestResult: { required: true, type: Object as () => StrategyBacktestResult },\n});\n\nconst formatPriceStake = (price) => {\n  return `${formatPrice(price, props.backtestResult.stake_currency_decimals)} ${\n    props.backtestResult.stake_currency\n  }`;\n};\nconst getSortedTrades = (backtestResult: StrategyBacktestResult): Trade[] => {\n  const sortedTrades = backtestResult.trades\n    .slice()\n    .sort((a, b) => a.profit_ratio - b.profit_ratio);\n  return sortedTrades;\n};\n\nconst bestPair = computed((): string => {\n  const trades = getSortedTrades(props.backtestResult);\n  if (trades.length === 0) {\n    return 'N/A';\n  }\n  const value = trades[trades.length - 1];\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n});\nconst worstPair = computed((): string => {\n  const trades = getSortedTrades(props.backtestResult);\n  if (trades.length === 0) {\n    return 'N/A';\n  }\n  const value = trades[0];\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n});\n\nconst pairSummary = computed(() => {\n  return props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1];\n});\n\nconst backtestResultStats = computed(() => {\n  // Transpose Result into readable format\n  const shortMetrics =\n    props.backtestResult?.trade_count_short && props.backtestResult?.trade_count_short > 0\n      ? [\n          { metric: '___', value: '___' },\n          {\n            metric: 'Long / Short',\n            value: `${props.backtestResult.trade_count_long} / ${props.backtestResult.trade_count_short}`,\n          },\n          {\n            metric: 'Total profit Long',\n            value: `${formatPercent(\n              props.backtestResult.profit_total_long || 0,\n            )} | ${formatPriceStake(props.backtestResult.profit_total_long_abs)}`,\n          },\n          {\n            metric: 'Total profit Short',\n            value: `${formatPercent(\n              props.backtestResult.profit_total_short || 0,\n            )} | ${formatPriceStake(props.backtestResult.profit_total_short_abs)}`,\n          },\n        ]\n      : [];\n\n  return [\n    {\n      metric: 'Total Profit',\n      value: `${formatPercent(props.backtestResult.profit_total)} | ${formatPriceStake(\n        props.backtestResult.profit_total_abs,\n      )}`,\n    },\n    {\n      metric: 'CAGR',\n      value: `${props.backtestResult.cagr ? formatPercent(props.backtestResult.cagr) : 'N/A'}`,\n    },\n    {\n      metric: 'Sortino',\n      value: `${props.backtestResult.sortino ? props.backtestResult.sortino.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: 'Sharpe',\n      value: `${props.backtestResult.sharpe ? props.backtestResult.sharpe.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: 'Calmar',\n      value: `${props.backtestResult.calmar ? props.backtestResult.calmar.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: `Expectancy ${props.backtestResult.expectancy_ratio ? '(ratio)' : ''}`,\n      value: `${\n        props.backtestResult.expectancy\n          ? props.backtestResult.expectancy_ratio\n            ? props.backtestResult.expectancy.toFixed(2) +\n              ' (' +\n              props.backtestResult.expectancy_ratio.toFixed(2) +\n              ')'\n            : props.backtestResult.expectancy.toFixed(2)\n          : 'N/A'\n      }`,\n    },\n    {\n      metric: 'Profit factor',\n      value: `${\n        props.backtestResult.profit_factor\n          ? formatPrice(props.backtestResult.profit_factor, 3)\n          : 'N/A'\n      }`,\n    },\n    {\n      metric: 'Total trades / Daily Avg Trades',\n      value: `${props.backtestResult.total_trades} / ${props.backtestResult.trades_per_day}`,\n    },\n    // { metric: 'First trade', value: props.backtestResult.backtest_fi },\n    // { metric: 'First trade Pair', value: props.backtestResult.backtest_best_day },\n    {\n      metric: 'Best day',\n      value: `${formatPercent(props.backtestResult.backtest_best_day, 2)} | ${formatPriceStake(\n        props.backtestResult.backtest_best_day_abs,\n      )}`,\n    },\n    {\n      metric: 'Worst day',\n      value: `${formatPercent(props.backtestResult.backtest_worst_day, 2)} | ${formatPriceStake(\n        props.backtestResult.backtest_worst_day_abs,\n      )}`,\n    },\n\n    {\n      metric: 'Win/Draw/Loss',\n      value: `${pairSummary.value.wins} / ${pairSummary.value.draws} / ${\n        pairSummary.value.losses\n      } ${\n        isNotUndefined(pairSummary.value.winrate)\n          ? '(WR: ' +\n            formatPercent(\n              props.backtestResult.results_per_pair[\n                props.backtestResult.results_per_pair.length - 1\n              ].winrate ?? 0,\n              2,\n            ) +\n            ')'\n          : ''\n      }`,\n    },\n    {\n      metric: 'Days win/draw/loss',\n      value: `${props.backtestResult.winning_days} / ${props.backtestResult.draw_days} / ${props.backtestResult.losing_days}`,\n    },\n\n    {\n      metric: 'Avg. Duration winners',\n      value: humanizeDurationFromSeconds(props.backtestResult.winner_holding_avg_s),\n    },\n    {\n      metric: 'Avg. Duration Losers',\n      value: humanizeDurationFromSeconds(props.backtestResult.loser_holding_avg_s),\n    },\n    {\n      metric: 'Max Consecutive Wins / Loss',\n      value:\n        props.backtestResult.max_consecutive_wins === undefined\n          ? 'N/A'\n          : `${props.backtestResult.max_consecutive_wins} / ${props.backtestResult.max_consecutive_losses}`,\n    },\n    { metric: 'Rejected entry signals', value: props.backtestResult.rejected_signals },\n    {\n      metric: 'Entry/Exit timeouts',\n      value: `${props.backtestResult.timedout_entry_orders} / ${props.backtestResult.timedout_exit_orders}`,\n    },\n    {\n      metric: 'Canceled Trade Entries',\n      value: props.backtestResult.canceled_trade_entries ?? 'N/A',\n    },\n    {\n      metric: 'Canceled Entry Orders',\n      value: props.backtestResult.canceled_entry_orders ?? 'N/A',\n    },\n    {\n      metric: 'Replaced Entry Orders',\n      value: props.backtestResult.replaced_entry_orders ?? 'N/A',\n    },\n\n    ...shortMetrics,\n\n    { metric: '___', value: '___' },\n    { metric: 'Min balance', value: formatPriceStake(props.backtestResult.csum_min) },\n    { metric: 'Max balance', value: formatPriceStake(props.backtestResult.csum_max) },\n    { metric: 'Market change', value: formatPercent(props.backtestResult.market_change) },\n    { metric: '___', value: '___' },\n    {\n      metric: 'Max Drawdown (Account)',\n      value: formatPercent(props.backtestResult.max_drawdown_account),\n    },\n    {\n      metric: 'Max Drawdown ABS',\n      value: formatPriceStake(props.backtestResult.max_drawdown_abs),\n    },\n    {\n      metric: 'Drawdown high | low',\n      value: `${formatPriceStake(props.backtestResult.max_drawdown_high)} | ${formatPriceStake(\n        props.backtestResult.max_drawdown_low,\n      )}`,\n    },\n    { metric: 'Drawdown start', value: timestampms(props.backtestResult.drawdown_start_ts) },\n    { metric: 'Drawdown end', value: timestampms(props.backtestResult.drawdown_end_ts) },\n    { metric: '___', value: '___' },\n\n    {\n      metric: 'Best Pair',\n      value: `${props.backtestResult.best_pair.key} ${formatPercent(\n        props.backtestResult.best_pair.profit_sum,\n      )}`,\n    },\n    {\n      metric: 'Worst Pair',\n      value: `${props.backtestResult.worst_pair.key} ${formatPercent(\n        props.backtestResult.worst_pair.profit_sum,\n      )}`,\n    },\n    { metric: 'Best single Trade', value: bestPair.value },\n    { metric: 'Worst single Trade', value: worstPair.value },\n  ];\n});\n\nconst backtestResultSettings = computed(() => {\n  // Transpose Result into readable format\n  return [\n    { setting: 'Backtesting from', value: timestampms(props.backtestResult.backtest_start_ts) },\n    { setting: 'Backtesting to', value: timestampms(props.backtestResult.backtest_end_ts) },\n    {\n      setting: 'BT execution time',\n      value: humanizeDurationFromSeconds(\n        props.backtestResult.backtest_run_end_ts - props.backtestResult.backtest_run_start_ts,\n      ),\n    },\n    { setting: 'Max open trades', value: props.backtestResult.max_open_trades },\n    { setting: 'Timeframe', value: props.backtestResult.timeframe },\n    { setting: 'Timeframe Detail', value: props.backtestResult.timeframe_detail || 'N/A' },\n    { setting: 'Timerange', value: props.backtestResult.timerange },\n    { setting: 'Stoploss', value: formatPercent(props.backtestResult.stoploss, 2) },\n    { setting: 'Trailing Stoploss', value: props.backtestResult.trailing_stop },\n    {\n      setting: 'Trail only when offset is reached',\n      value: props.backtestResult.trailing_only_offset_is_reached,\n    },\n    { setting: 'Trailing Stop positive', value: props.backtestResult.trailing_stop_positive },\n    {\n      setting: 'Trailing stop positive offset',\n      value: props.backtestResult.trailing_stop_positive_offset,\n    },\n    { setting: 'Custom Stoploss', value: props.backtestResult.use_custom_stoploss },\n    { setting: 'ROI', value: props.backtestResult.minimal_roi },\n    {\n      setting: 'Use Exit Signal',\n      value:\n        props.backtestResult.use_exit_signal !== undefined\n          ? props.backtestResult.use_exit_signal\n          : props.backtestResult.use_sell_signal,\n    },\n    {\n      setting: 'Exit profit only',\n      value:\n        props.backtestResult.exit_profit_only !== undefined\n          ? props.backtestResult.exit_profit_only\n          : props.backtestResult.sell_profit_only,\n    },\n    {\n      setting: 'Exit profit offset',\n      value:\n        props.backtestResult.exit_profit_offset !== undefined\n          ? props.backtestResult.exit_profit_offset\n          : props.backtestResult.sell_profit_offset,\n    },\n    { setting: 'Enable protections', value: props.backtestResult.enable_protections },\n    {\n      setting: 'Starting balance',\n      value: formatPriceStake(props.backtestResult.starting_balance),\n    },\n    {\n      setting: 'Final balance',\n      value: formatPriceStake(props.backtestResult.final_balance),\n    },\n    {\n      setting: 'Avg. stake amount',\n      value: formatPriceStake(props.backtestResult.avg_stake_amount),\n    },\n    {\n      setting: 'Total trade volume',\n      value: formatPriceStake(props.backtestResult.total_volume),\n    },\n  ];\n});\nconst perPairFields = computed(() => {\n  return [\n    { key: 'key', label: 'Pair' },\n    { key: 'trades', label: 'Buys' },\n    {\n      key: 'profit_mean',\n      label: 'Avg Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\n    {\n      key: 'profit_total_abs',\n      label: `Tot Profit ${props.backtestResult.stake_currency}`,\n      formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\n    },\n    {\n      key: 'profit_total',\n      label: 'Tot Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'duration_avg', label: 'Avg Duration' },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'losses', label: 'Losses' },\n  ];\n});\n\nconst perExitReason = computed(() => {\n  return [\n    { key: 'exit_reason', label: 'Exit Reason' },\n    { key: 'trades', label: 'Buys' },\n    {\n      key: 'profit_mean',\n      label: 'Avg Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\n    {\n      key: 'profit_total_abs',\n      label: `Tot Profit ${props.backtestResult.stake_currency}`,\n\n      formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\n    },\n    {\n      key: 'profit_total',\n      label: 'Tot Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'losses', label: 'Losses' },\n  ];\n});\nconst backtestResultFields: TableField[] = [\n  { key: 'metric', label: 'Metric' },\n  { key: 'value', label: 'Value' },\n];\n\nconst backtestsettingFields: TableField[] = [\n  { key: 'setting', label: 'Setting' },\n  { key: 'value', label: 'Value' },\n];\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n  <div>\n    <div class=\"w-100 d-flex\">\n      <b-form-select\n        id=\"freqaiModel-select\"\n        v-model=\"locFreqaiModel\"\n        :options=\"botStore.activeBot.freqaiModelList\"\n      >\n      </b-form-select>\n      <div class=\"ms-2\">\n        <b-button @click=\"botStore.activeBot.getFreqAIModelList\">\n          <i-mdi-refresh />\n        </b-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { computed, onMounted } from 'vue';\n\nconst props = defineProps({\n  modelValue: { type: String, required: true },\n});\nconst emit = defineEmits(['update:modelValue']);\nconst botStore = useBotStore();\n\nconst locFreqaiModel = computed({\n  get() {\n    return props.modelValue;\n  },\n  set(freqaiModel: string) {\n    emit('update:modelValue', freqaiModel);\n  },\n});\n\nonMounted(() => {\n  if (botStore.activeBot.freqaiModelList.length === 0) {\n    botStore.activeBot.getFreqAIModelList();\n  }\n});\n</script>\n","import { defineStore } from 'pinia';\n\nexport const useBtStore = defineStore('btStore', {\n  state: () => {\n    return {\n      strategy: '',\n      selectedTimeframe: '',\n      selectedDetailTimeframe: '',\n      timerange: '',\n      maxOpenTrades: '',\n      stakeAmount: '',\n      startingCapital: '',\n      allowCache: true,\n      enableProtections: false,\n      stakeAmountUnlimited: false,\n      freqAI: {\n        enabled: false,\n        model: '',\n        identifier: '',\n      },\n    };\n  },\n  getters: {},\n  actions: {},\n});\n","<template>\n  <div class=\"mb-2\">\n    <span>Strategy</span>\n    <StrategySelect v-model=\"btStore.strategy\"></StrategySelect>\n  </div>\n  <b-card :disabled=\"botStore.activeBot.backtestRunning\">\n    <!-- Backtesting parameters -->\n    <b-form-group\n      label-cols-lg=\"2\"\n      label=\"Backtest params\"\n      label-size=\"sm\"\n      label-class=\"fw-bold pt-0\"\n      class=\"mb-0\"\n    >\n      <b-form-group\n        label-cols-sm=\"5\"\n        label=\"Timeframe:\"\n        label-align-sm=\"right\"\n        label-for=\"timeframe-select\"\n      >\n        <TimeframeSelect id=\"timeframe-select\" v-model=\"btStore.selectedTimeframe\" />\n      </b-form-group>\n      <b-form-group\n        label-cols-sm=\"5\"\n        label=\"Detail Timeframe:\"\n        label-align-sm=\"right\"\n        label-for=\"timeframe-detail-select\"\n        title=\"Detail timeframe, to simulate intra-candle results. Not setting this will not use this functionality.\"\n      >\n        <TimeframeSelect\n          id=\"timeframe-detail-select\"\n          v-model=\"btStore.selectedDetailTimeframe\"\n          :below-timeframe=\"btStore.selectedTimeframe\"\n        />\n      </b-form-group>\n\n      <b-form-group\n        label-cols-sm=\"5\"\n        label=\"Max open trades:\"\n        label-align-sm=\"right\"\n        label-for=\"max-open-trades\"\n      >\n        <b-form-input\n          id=\"max-open-trades\"\n          v-model=\"btStore.maxOpenTrades\"\n          placeholder=\"Use strategy default\"\n          type=\"number\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group\n        label-cols-sm=\"5\"\n        label=\"Starting capital:\"\n        label-align-sm=\"right\"\n        label-for=\"starting-capital\"\n      >\n        <b-form-input\n          id=\"starting-capital\"\n          v-model=\"btStore.startingCapital\"\n          type=\"number\"\n          step=\"0.001\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group\n        label-cols-sm=\"5\"\n        label=\"Stake amount:\"\n        label-align-sm=\"right\"\n        label-for=\"stake-amount\"\n      >\n        <div class=\"d-flex\">\n          <b-form-checkbox\n            id=\"stake-amount-bool\"\n            v-model=\"btStore.stakeAmountUnlimited\"\n            class=\"col-md-6\"\n            >Unlimited stake</b-form-checkbox\n          >\n\n          <b-form-input\n            id=\"stake-amount\"\n            v-model=\"btStore.stakeAmount\"\n            type=\"number\"\n            placeholder=\"Use strategy default\"\n            step=\"0.01\"\n            :disabled=\"btStore.stakeAmountUnlimited\"\n          ></b-form-input>\n        </div>\n      </b-form-group>\n\n      <b-form-group\n        label-cols-sm=\"5\"\n        label=\"Enable Protections:\"\n        label-align-sm=\"right\"\n        label-for=\"enable-protections\"\n      >\n        <b-form-checkbox\n          id=\"enable-protections\"\n          v-model=\"btStore.enableProtections\"\n        ></b-form-checkbox>\n      </b-form-group>\n      <b-form-group\n        v-if=\"botStore.activeBot.botApiVersion >= 2.22\"\n        label-cols-sm=\"5\"\n        label=\"Cache Backtest results:\"\n        label-align-sm=\"right\"\n        label-for=\"enable-cache\"\n      >\n        <b-form-checkbox id=\"enable-cache\" v-model=\"btStore.allowCache\"></b-form-checkbox>\n      </b-form-group>\n      <template v-if=\"botStore.activeBot.botApiVersion >= 2.22\">\n        <b-form-group\n          label-cols-sm=\"5\"\n          label=\"Enable FreqAI:\"\n          label-align-sm=\"right\"\n          label-for=\"enable-freqai\"\n        >\n          <template #label>\n            <div class=\"d-flex justify-content-center\">\n              <span class=\"me-2\">Enable FreqAI:</span>\n              <InfoBox\n                hint=\"Assumes freqAI configuration is setup in the configuration, and the strategy is a freqAI strategy. Will fail if that's not the case.\"\n              />\n            </div>\n          </template>\n          <b-form-checkbox id=\"enable-freqai\" v-model=\"btStore.freqAI.enabled\"></b-form-checkbox>\n        </b-form-group>\n        <b-form-group\n          v-if=\"btStore.freqAI.enabled\"\n          label-cols-sm=\"5\"\n          label=\"FreqAI identifier:\"\n          label-align-sm=\"right\"\n          label-for=\"freqai-identifier\"\n        >\n          <b-form-input\n            id=\"freqai-identifier\"\n            v-model=\"btStore.freqAI.identifier\"\n            placeholder=\"Use config default\"\n          ></b-form-input>\n        </b-form-group>\n        <b-form-group\n          v-if=\"btStore.freqAI.enabled\"\n          label-cols-sm=\"5\"\n          label=\"FreqAI Model\"\n          label-align-sm=\"right\"\n          label-for=\"freqai-model\"\n        >\n          <FreqaiModelSelect id=\"freqai-model\" v-model=\"btStore.freqAI.model\"></FreqaiModelSelect>\n        </b-form-group>\n      </template>\n\n      <!-- <b-form-group label-cols-sm=\"5\" label=\"Fee:\" label-align-sm=\"right\" label-for=\"fee\">\n              <b-form-input\n                id=\"fee\"\n                type=\"number\"\n                placeholder=\"Use exchange default\"\n                step=\"0.01\"\n              ></b-form-input>\n            </b-form-group> -->\n      <hr />\n      <TimeRangeSelect v-model=\"btStore.timerange\" class=\"mt-2\"></TimeRangeSelect>\n    </b-form-group>\n  </b-card>\n\n  <h3 class=\"mt-3\">Backtesting summary</h3>\n  <div class=\"d-flex flex-wrap flex-md-nowrap justify-content-between justify-content-md-center\">\n    <b-button\n      id=\"start-backtest\"\n      variant=\"primary\"\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n      class=\"mx-1\"\n      @click=\"clickBacktest\"\n    >\n      Start backtest\n    </b-button>\n    <b-button\n      variant=\"primary\"\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n      class=\"mx-1\"\n      @click=\"botStore.activeBot.pollBacktest\"\n    >\n      Load backtest result\n    </b-button>\n    <b-button\n      variant=\"primary\"\n      class=\"mx-1\"\n      :disabled=\"!botStore.activeBot.backtestRunning\"\n      @click=\"botStore.activeBot.stopBacktest\"\n      >Stop Backtest</b-button\n    >\n    <b-button\n      variant=\"primary\"\n      class=\"mx-1\"\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n      @click=\"botStore.activeBot.removeBacktest\"\n      >Reset Backtest</b-button\n    >\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport TimeRangeSelect from '@/components/ftbot/TimeRangeSelect.vue';\n\nimport FreqaiModelSelect from '@/components/ftbot/FreqaiModelSelect.vue';\nimport StrategySelect from '@/components/ftbot/StrategySelect.vue';\nimport TimeframeSelect from '@/components/ftbot/TimeframeSelect.vue';\n\nimport InfoBox from '@/components/general/InfoBox.vue';\n\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { BacktestPayload } from '@/types';\n\nimport { useBtStore } from '@/stores/btStore';\nconst botStore = useBotStore();\nconst btStore = useBtStore();\n\nfunction clickBacktest() {\n  const btPayload: BacktestPayload = {\n    strategy: btStore.strategy,\n    timerange: btStore.timerange,\n    enable_protections: btStore.enableProtections,\n  };\n  const openTradesInt = parseInt(btStore.maxOpenTrades, 10);\n  if (openTradesInt) {\n    btPayload.max_open_trades = openTradesInt;\n  }\n  if (btStore.stakeAmountUnlimited) {\n    btPayload.stake_amount = 'unlimited';\n  } else {\n    const stakeAmountLoc = Number(btStore.stakeAmount);\n    if (stakeAmountLoc) {\n      btPayload.stake_amount = stakeAmountLoc.toString();\n    }\n  }\n\n  const startingCapitalLoc = Number(btStore.startingCapital);\n  if (startingCapitalLoc) {\n    btPayload.dry_run_wallet = startingCapitalLoc;\n  }\n\n  if (btStore.selectedTimeframe) {\n    btPayload.timeframe = btStore.selectedTimeframe;\n  }\n  if (btStore.selectedDetailTimeframe) {\n    btPayload.timeframe_detail = btStore.selectedDetailTimeframe;\n  }\n  if (!btStore.allowCache) {\n    btPayload.backtest_cache = 'none';\n  }\n  if (btStore.freqAI.enabled) {\n    btPayload.freqaimodel = btStore.freqAI.model;\n    if (btStore.freqAI.identifier !== '') {\n      btPayload.freqai = { identifier: btStore.freqAI.identifier };\n    }\n  }\n\n  botStore.activeBot.startBacktest(btPayload);\n}\n</script>\n\n<style scoped></style>\n","<template>\n  <div class=\"d-flex flex-column pt-1 me-1\" style=\"height: calc(100vh - 60px)\">\n    <div>\n      <div class=\"d-flex flex-row\">\n        <h2 class=\"ms-5\">Backtesting</h2>\n        <p v-if=\"!botStore.activeBot.canRunBacktest\">\n          Bot must be in webserver mode to enable Backtesting.\n        </p>\n        <div class=\"w-100\">\n          <div\n            class=\"mx-md-5 d-flex flex-wrap justify-content-md-center justify-content-between mb-4 gap-2\"\n          >\n            <b-form-radio\n              v-if=\"botStore.activeBot.botApiVersion >= 2.15\"\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"historicResults\"\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\n              >Load Results</b-form-radio\n            >\n            <b-form-radio\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"run\"\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\n              >Run backtest</b-form-radio\n            >\n            <b-form-radio\n              id=\"bt-analyze-btn\"\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"results\"\n              :disabled=\"!hasBacktestResult\"\n              >Analyze result</b-form-radio\n            >\n            <b-form-radio\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"visualize-summary\"\n              :disabled=\"!hasBacktestResult\"\n              >Visualize summary</b-form-radio\n            >\n            <b-form-radio\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"visualize\"\n              :disabled=\"!hasBacktestResult\"\n              >Visualize result</b-form-radio\n            >\n          </div>\n          <small v-show=\"botStore.activeBot.backtestRunning\" class=\"text-end bt-running-label\"\n            >Backtest running: {{ botStore.activeBot.backtestStep }}\n            {{ formatPercent(botStore.activeBot.backtestProgress, 2) }}</small\n          >\n        </div>\n      </div>\n    </div>\n    <div class=\"d-flex flex-md-row\">\n      <!-- Left bar -->\n      <div\n        v-if=\"btFormMode !== 'visualize'\"\n        :class=\"`${showLeftBar ? 'col-md-3' : ''}`\"\n        class=\"sticky-top sticky-offset me-3 d-flex flex-column absolute\"\n        style=\"max-height: calc(100vh - 60px)\"\n      >\n        <b-button\n          class=\"align-self-start\"\n          aria-label=\"Close\"\n          size=\"sm\"\n          @click=\"showLeftBar = !showLeftBar\"\n          >{{ showLeftBar ? '&lt;' : '&gt;' }}</b-button\n        >\n        <transition name=\"fade\" mode=\"in-out\">\n          <BacktestResultSelect\n            v-if=\"btFormMode !== 'visualize' && showLeftBar\"\n            :backtest-history=\"botStore.activeBot.backtestHistory\"\n            :selected-backtest-result-key=\"botStore.activeBot.selectedBacktestResultKey\"\n            :can-use-modify=\"botStore.activeBot.botApiVersion >= 2.32\"\n            @selection-change=\"botStore.activeBot.setBacktestResultKey\"\n            @remove-result=\"botStore.activeBot.removeBacktestResultFromMemory\"\n            @update-result=\"botStore.activeBot.saveBacktestResultMetadata\"\n          />\n        </transition>\n      </div>\n      <!-- End Left bar -->\n      <div class=\"d-flex flex-column flex-fill mw-100\">\n        <div class=\"d-md-flex\">\n          <div\n            v-if=\"btFormMode == 'historicResults'\"\n            class=\"flex-fill d-flex flex-column bt-config\"\n          >\n            <BacktestHistoryLoad />\n          </div>\n          <div v-if=\"btFormMode == 'run'\" class=\"flex-fill d-flex flex-column bt-config\">\n            <BacktestRun />\n          </div>\n          <BacktestResultAnalysis\n            v-if=\"hasBacktestResult && btFormMode == 'results'\"\n            :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\n            class=\"flex-fill\"\n          />\n\n          <BacktestGraphs\n            v-if=\"hasBacktestResult && btFormMode == 'visualize-summary'\"\n            :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n            class=\"flex-fill\"\n          />\n        </div>\n\n        <div\n          v-if=\"hasBacktestResult && btFormMode == 'visualize'\"\n          class=\"container-fluid text-center w-100 mt-2\"\n        >\n          <BacktestResultChart\n            :timeframe=\"timeframe\"\n            :strategy=\"btStore.strategy\"\n            :timerange=\"btStore.timerange\"\n            :pairlist=\"botStore.activeBot.selectedBacktestResult.pairlist\"\n            :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n            :freqai-model=\"btStore.freqAI.enabled ? btStore.freqAI.model : undefined\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport BacktestGraphs from '@/components/ftbot/BacktestGraphs.vue';\nimport BacktestHistoryLoad from '@/components/ftbot/BacktestHistoryLoad.vue';\nimport BacktestResultChart from '@/components/ftbot/BacktestResultChart.vue';\nimport BacktestResultSelect from '@/components/ftbot/BacktestResultSelect.vue';\nimport BacktestResultAnalysis from '@/components/ftbot/BacktestResultAnalysis.vue';\nimport BacktestRun from '@/components/ftbot/BacktestRun.vue';\n\nimport { formatPercent } from '@/shared/formatters';\nimport { useBtStore } from '@/stores/btStore';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { computed, onMounted, ref, watch } from 'vue';\n\nconst botStore = useBotStore();\nconst btStore = useBtStore();\n\nconst hasBacktestResult = computed(() =>\n  botStore.activeBot.backtestHistory\n    ? Object.keys(botStore.activeBot.backtestHistory).length !== 0\n    : false,\n);\nconst timeframe = computed((): string => {\n  try {\n    return botStore.activeBot.selectedBacktestResult.timeframe;\n  } catch (err) {\n    return '';\n  }\n});\n\nconst showLeftBar = ref(false);\n\nconst btFormMode = ref('run');\nconst pollInterval = ref<number | null>(null);\n\nconst selectBacktestResult = () => {\n  // Set parameters for this result\n  btStore.strategy = botStore.activeBot.selectedBacktestResult.strategy_name;\n  botStore.activeBot.getStrategy(btStore.strategy);\n  btStore.selectedTimeframe = botStore.activeBot.selectedBacktestResult.timeframe;\n  btStore.selectedDetailTimeframe =\n    botStore.activeBot.selectedBacktestResult.timeframe_detail || '';\n  // TODO: maybe this should not use timerange, but the actual backtest start/end results instead?\n  btStore.timerange = botStore.activeBot.selectedBacktestResult.timerange;\n};\n\nwatch(\n  () => botStore.activeBot.selectedBacktestResultKey,\n  () => {\n    selectBacktestResult();\n  },\n);\n\nonMounted(() => botStore.activeBot.getState());\nwatch(\n  () => botStore.activeBot.backtestRunning,\n  () => {\n    if (botStore.activeBot.backtestRunning === true) {\n      pollInterval.value = window.setInterval(botStore.activeBot.pollBacktest, 1000);\n    } else if (pollInterval.value) {\n      clearInterval(pollInterval.value);\n      pollInterval.value = null;\n    }\n  },\n);\n</script>\n\n<style lang=\"scss\" scoped>\n.bt-running-label {\n  position: absolute;\n  right: 2em;\n  margin-top: 1em;\n}\n\n.sticky-offset {\n  top: 2em;\n}\n.flex-samesize-items {\n  flex: 1 1 0;\n  @media md {\n    flex: unset;\n  }\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.2s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.bt-config {\n  @media (min-width: 992px) {\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 75vw;\n  }\n}\n</style>\n"],"names":["botStore","useBotStore","msgBox","ref","onMounted","deleteBacktestResult","result","msg","_a","selectedTrade","sortNewestFirst","onTradeSelect","trade","emit","sortedTrades","computed","props","a","b","ordersVisible","watch","showRightBar","sliderPosition","navigateChartToTrade","setBacktestResult","key","confirmInput","run_id","periodicBreakdownSelections","periodicBreakdownPeriod","periodicBreakdownFields","formatPriceStake","price","formatPrice","getSortedTrades","backtestResult","bestPair","trades","value","formatPercent","worstPair","pairSummary","backtestResultStats","shortMetrics","_b","isNotUndefined","humanizeDurationFromSeconds","timestampms","backtestResultSettings","perPairFields","perExitReason","backtestResultFields","backtestsettingFields","locFreqaiModel","freqaiModel","useBtStore","defineStore","btStore","clickBacktest","btPayload","openTradesInt","stakeAmountLoc","startingCapitalLoc","hasBacktestResult","timeframe","showLeftBar","btFormMode","pollInterval","selectBacktestResult"],"mappings":"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"}