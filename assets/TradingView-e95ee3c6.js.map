{"version":3,"file":"TradingView-e95ee3c6.js","sources":["../../src/components/ftbot/ForceEntryForm.vue","../../src/components/ftbot/BotControls.vue","../../src/components/ftbot/BotProfit.vue","../../src/components/ftbot/BotStatus.vue","../../src/components/ftbot/PeriodBreakdown.vue","../../src/components/ftbot/PairLockList.vue","../../src/components/ftbot/BotPerformance.vue","../../src/views/TradingView.vue"],"sourcesContent":["<template>\n  <b-modal\n    id=\"forceentry-modal\"\n    ref=\"modal\"\n    v-model=\"model\"\n    title=\"Force entering a trade\"\n    @show=\"resetForm\"\n    @hidden=\"resetForm\"\n    @ok=\"handleEntry\"\n  >\n    <form ref=\"form\" @submit.stop.prevent=\"handleSubmit\">\n      <b-form-group\n        v-if=\"botStore.activeBot.botApiVersion >= 2.13 && botStore.activeBot.shortAllowed\"\n        label=\"Order direction (Long or Short)\"\n        label-for=\"order-direction\"\n        invalid-feedback=\"Order direction must be set\"\n        :state=\"orderSide !== undefined\"\n      >\n        <b-form-radio-group\n          id=\"order-direction\"\n          v-model=\"orderSide\"\n          :options=\"orderSideOptions\"\n          name=\"radios-btn-default\"\n          size=\"sm\"\n          buttons\n          style=\"min-width: 10em\"\n          button-variant=\"outline-primary\"\n        ></b-form-radio-group>\n      </b-form-group>\n      <b-form-group\n        label=\"Pair\"\n        label-for=\"pair-input\"\n        invalid-feedback=\"Pair is required\"\n        :state=\"selectedPair !== undefined\"\n      >\n        <b-form-input\n          id=\"pair-input\"\n          v-model=\"selectedPair\"\n          required\n          @keydown.enter=\"handleEntry\"\n          @focus=\"inputSelect\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group\n        label=\"*Price [optional]\"\n        label-for=\"price-input\"\n        invalid-feedback=\"Price must be empty or a positive number\"\n        :state=\"!price || price > 0\"\n      >\n        <b-form-input\n          id=\"price-input\"\n          v-model=\"price\"\n          type=\"number\"\n          step=\"0.00000001\"\n          @keydown.enter=\"handleEntry\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group\n        :label=\"`*Stake-amount in ${botStore.activeBot.stakeCurrency} [optional]`\"\n        label-for=\"stake-input\"\n        invalid-feedback=\"Stake-amount must be empty or a positive number\"\n        :state=\"!stakeAmount || stakeAmount > 0\"\n      >\n        <b-form-input\n          id=\"stake-input\"\n          v-model=\"stakeAmount\"\n          type=\"number\"\n          step=\"0.000001\"\n          @keydown.enter=\"handleEntry\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group\n        v-if=\"botStore.activeBot.botApiVersion > 2.16 && botStore.activeBot.shortAllowed\"\n        :label=\"`*Leverage to apply [optional]`\"\n        label-for=\"leverage-input\"\n        invalid-feedback=\"Leverage must be empty or a positive number\"\n        :state=\"!leverage || leverage > 0\"\n      >\n        <b-form-input\n          id=\"leverage-input\"\n          v-model=\"leverage\"\n          type=\"number\"\n          step=\"0.01\"\n          @keydown.enter=\"handleEntry\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group\n        label=\"OrderType\"\n        label-for=\"ordertype-input\"\n        invalid-feedback=\"OrderType\"\n        :state=\"true\"\n      >\n        <b-form-radio-group\n          id=\"ordertype-input\"\n          v-model=\"ordertype\"\n          :options=\"orderTypeOptions\"\n          name=\"radios-btn-orderType\"\n          buttons\n          button-variant=\"outline-primary\"\n          style=\"min-width: 10em\"\n          size=\"sm\"\n        ></b-form-radio-group>\n      </b-form-group>\n      <b-form-group\n        v-if=\"botStore.activeBot.botApiVersion > 1.16\"\n        label=\"*Custom entry tag Optional]\"\n        label-for=\"enterTag-input\"\n      >\n        <b-form-input\n          id=\"enterTag-input\"\n          v-model=\"enterTag\"\n          type=\"text\"\n          name=\"radios-btn-orderType\"\n        ></b-form-input>\n      </b-form-group>\n    </form>\n  </b-modal>\n</template>\n\n<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { ForceEnterPayload, OrderSides } from '@/types';\n\nimport { computed, nextTick, ref } from 'vue';\n\nconst props = defineProps({\n  modelValue: { required: true, default: false, type: Boolean },\n  pair: { type: String, default: '' },\n});\nconst emit = defineEmits(['update:modelValue']);\nconst botStore = useBotStore();\n\nconst form = ref<HTMLFormElement>();\nconst selectedPair = ref('');\nconst price = ref<number | undefined>(undefined);\nconst stakeAmount = ref<number | undefined>(undefined);\nconst leverage = ref<number | undefined>(undefined);\n\nconst ordertype = ref('');\nconst orderSide = ref<OrderSides>(OrderSides.long);\nconst enterTag = ref('force_entry');\n\nconst orderTypeOptions = [\n  { value: 'market', text: 'Market' },\n  { value: 'limit', text: 'Limit' },\n];\nconst orderSideOptions = [\n  { value: 'long', text: 'Long' },\n  { value: 'short', text: 'Short' },\n];\n\nconst model = computed({\n  get() {\n    return props.modelValue;\n  },\n  set(value: boolean) {\n    emit('update:modelValue', value);\n  },\n});\n\nconst checkFormValidity = () => {\n  const valid = form.value?.checkValidity();\n\n  return valid;\n};\n\nconst handleSubmit = async () => {\n  // Exit when the form isn't valid\n  if (!checkFormValidity()) {\n    return;\n  }\n\n  // call forceentry\n  const payload: ForceEnterPayload = { pair: selectedPair.value };\n  if (price.value) {\n    payload.price = Number(price.value);\n  }\n  if (ordertype.value) {\n    payload.ordertype = ordertype.value;\n  }\n  if (stakeAmount.value) {\n    payload.stakeamount = stakeAmount.value;\n  }\n  if (botStore.activeBot.botApiVersion >= 2.13 && botStore.activeBot.shortAllowed) {\n    payload.side = orderSide.value;\n  }\n  if (botStore.activeBot.botApiVersion >= 2.16 && enterTag.value) {\n    payload.entry_tag = enterTag.value;\n  }\n\n  if (leverage.value) {\n    payload.leverage = leverage.value;\n  }\n  botStore.activeBot.forceentry(payload);\n  await nextTick();\n  emit('update:modelValue', false);\n};\nconst resetForm = () => {\n  console.log('resetForm');\n  selectedPair.value = props.pair;\n  price.value = undefined;\n  stakeAmount.value = undefined;\n  ordertype.value =\n    botStore.activeBot.botState?.order_types?.forcebuy ||\n    botStore.activeBot.botState?.order_types?.force_entry ||\n    botStore.activeBot.botState?.order_types?.buy ||\n    botStore.activeBot.botState?.order_types?.entry ||\n    'limit';\n};\n\nconst handleEntry = () => {\n  // Trigger submit handler\n  handleSubmit();\n};\nconst inputSelect = (bvModalEvt) => {\n  bvModalEvt.srcElement?.select();\n};\n</script>\n","forceexit\n<template>\n  <div>\n    <button\n      class=\"btn btn-secondary btn-sm ms-1\"\n      :disabled=\"!botStore.activeBot.isTrading || isRunning\"\n      title=\"Start Trading\"\n      @click=\"botStore.activeBot.startBot()\"\n    >\n      <i-mdi-play height=\"24\" width=\"24\" />\n    </button>\n    <button\n      class=\"btn btn-secondary btn-sm ms-1\"\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\n      title=\"Stop Trading - Also stops handling open trades.\"\n      @click=\"handleStopBot()\"\n    >\n      <i-mdi-stop height=\"24\" width=\"24\" />\n    </button>\n    <button\n      class=\"btn btn-secondary btn-sm ms-1\"\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\n      title=\"StopBuy - Stops buying, but still handles open trades\"\n      @click=\"handleStopBuy()\"\n    >\n      <i-mdi-pause height=\"24\" width=\"24\" />\n    </button>\n    <button\n      class=\"btn btn-secondary btn-sm ms-1\"\n      :disabled=\"!botStore.activeBot.isTrading\"\n      title=\"Reload Config - reloads configuration including strategy, resetting all settings changed on the fly.\"\n      @click=\"handleReloadConfig()\"\n    >\n      <i-mdi-reload height=\"24\" width=\"24\" />\n    </button>\n    <button\n      class=\"btn btn-secondary btn-sm ms-1\"\n      :disabled=\"!botStore.activeBot.isTrading\"\n      title=\"Force exit all\"\n      @click=\"handleForceExit()\"\n    >\n      <i-mdi-close-box-multiple height=\"24\" width=\"24\" />\n    </button>\n    <button\n      v-if=\"botStore.activeBot.botState && botStore.activeBot.botState.force_entry_enable\"\n      class=\"btn btn-secondary btn-sm ms-1\"\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\n      title=\"Force enter - Immediately enter a trade at an optional price. Exits are then handled according to strategy rules.\"\n      @click=\"forceEnter = true\"\n    >\n      <i-mdi-plus-box-multiple-outline style=\"font-size: 20px\" />\n    </button>\n    <button\n      v-if=\"botStore.activeBot.isWebserverMode && false\"\n      :disabled=\"botStore.activeBot.isTrading\"\n      class=\"btn btn-secondary btn-sm ms-1\"\n      title=\"Start Trading mode\"\n      @click=\"botStore.activeBot.startTrade()\"\n    >\n      <i-mdi-play class=\"fs-4\" />\n    </button>\n    <ForceEntryForm v-model=\"forceEnter\" :pair=\"botStore.activeBot.selectedPair\" />\n    <MessageBox ref=\"msgBox\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport MessageBox, { MsgBoxObject } from '@/components/general/MessageBox.vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { ForceSellPayload } from '@/types';\nimport { computed, ref } from 'vue';\n\nimport ForceEntryForm from './ForceEntryForm.vue';\n\nconst botStore = useBotStore();\nconst forceEnter = ref<boolean>(false);\nconst msgBox = ref<typeof MessageBox>();\n\nconst isRunning = computed((): boolean => {\n  return botStore.activeBot.botState?.state === 'running';\n});\n\nconst handleStopBot = () => {\n  const msg: MsgBoxObject = {\n    title: 'Stop Bot',\n    message: 'Stop the bot loop from running?',\n    accept: () => {\n      botStore.activeBot.stopBot();\n    },\n  };\n  msgBox.value?.show(msg);\n};\n\nconst handleStopBuy = () => {\n  const msg: MsgBoxObject = {\n    title: 'Stop Buying',\n    message: 'Freqtrade will continue to handle open trades.',\n    accept: () => {\n      botStore.activeBot.stopBuy();\n    },\n  };\n  msgBox.value?.show(msg);\n};\n\nconst handleReloadConfig = () => {\n  const msg: MsgBoxObject = {\n    title: 'Reload',\n    message: 'Reload configuration (including strategy)?',\n    accept: () => {\n      console.log('reload...');\n      botStore.activeBot.reloadConfig();\n    },\n  };\n  msgBox.value?.show(msg);\n};\n\nconst handleForceExit = () => {\n  const msg: MsgBoxObject = {\n    title: 'ForceExit all',\n    message: 'Really forceexit ALL trades?',\n    accept: () => {\n      const payload: ForceSellPayload = {\n        tradeid: 'all',\n        // TODO: support ordertype (?)\n      };\n      botStore.activeBot.forceexit(payload);\n    },\n  };\n  msgBox.value?.show(msg);\n};\n</script>\n","<template>\n  <b-table class=\"text-start\" small borderless :items=\"profitItems\" :fields=\"profitFields\">\n    <template #cell(value)=\"row\">\n      <DateTimeTZ v-if=\"row.item.isTs && row.value\" :date=\"row.value as number\"></DateTimeTZ>\n      <template v-else>{{ row.value }}</template>\n    </template>\n  </b-table>\n</template>\n\n<script setup lang=\"ts\">\nimport { formatPercent, formatPriceCurrency, timestampms } from '@/shared/formatters';\nimport DateTimeTZ from '@/components/general/DateTimeTZ.vue';\n\nimport { ProfitInterface } from '@/types';\nimport { TableField, TableItem } from 'bootstrap-vue-next';\nimport { computed } from 'vue';\n\nconst props = defineProps({\n  profit: { required: true, type: Object as () => ProfitInterface },\n  stakeCurrency: { required: true, type: String },\n  stakeCurrencyDecimals: { required: true, type: Number },\n});\n\nconst profitFields: TableField[] = [\n  { key: 'metric', label: 'Metric' },\n  { key: 'value', label: 'Value' },\n];\n\nconst profitItems = computed<TableItem[]>(() => {\n  if (!props.profit) return [];\n  return [\n    {\n      metric: 'ROI open trades',\n      value: props.profit.profit_closed_coin\n        ? `${formatPriceCurrency(\n            props.profit.profit_closed_coin,\n            props.stakeCurrency,\n            props.stakeCurrencyDecimals,\n          )} (${formatPercent(props.profit.profit_closed_ratio_mean, 2)})`\n        : 'N/A',\n      // (&sum; ${formatPercent(props.profit.profit_closed_ratio_sum,  2,)})`\n    },\n    {\n      metric: 'ROI all trades',\n      value: props.profit.profit_all_coin\n        ? `${formatPriceCurrency(\n            props.profit.profit_all_coin,\n            props.stakeCurrency,\n            props.stakeCurrencyDecimals,\n          )} (${formatPercent(props.profit.profit_all_ratio_mean, 2)})`\n        : 'N/A',\n      //  (&sum; ${formatPercent(props.profit.profit_all_ratio_sum,2,)})`\n    },\n\n    {\n      metric: 'Total Trade count',\n      value: `${props.profit.trade_count ?? 0}`,\n    },\n    {\n      metric: 'Bot started',\n      value: props.profit.bot_start_timestamp,\n      isTs: true,\n    },\n    {\n      metric: 'First Trade opened',\n      value: props.profit.first_trade_timestamp,\n      isTs: true,\n    },\n    {\n      metric: 'Latest Trade opened',\n      value: props.profit.latest_trade_timestamp,\n      isTs: true,\n    },\n    {\n      metric: 'Win / Loss',\n      value: `${props.profit.winning_trades ?? 0} / ${props.profit.losing_trades ?? 0}`,\n    },\n    {\n      metric: 'Winrate',\n      value: `${props.profit.winrate ? formatPercent(props.profit.winrate) : 'N/A'}`,\n    },\n    {\n      metric: 'Expectancy (ratio)',\n      value: `${props.profit.expectancy ? props.profit.expectancy.toFixed(2) : 'N/A'} (${\n        props.profit.expectancy_ratio ? props.profit.expectancy_ratio.toFixed(2) : 'N/A'\n      })`,\n    },\n    {\n      metric: 'Avg. Duration',\n      value: `${props.profit.avg_duration ?? 'N/A'}`,\n    },\n    {\n      metric: 'Best performing',\n      value: props.profit.best_pair\n        ? `${props.profit.best_pair}: ${formatPercent(props.profit.best_pair_profit_ratio, 2)}`\n        : 'N/A',\n    },\n    {\n      metric: 'Trading volume',\n      value: `${formatPriceCurrency(\n        props.profit.trading_volume ?? 0,\n        props.stakeCurrency,\n        props.stakeCurrencyDecimals,\n      )}`,\n    },\n    {\n      metric: 'Profit factor',\n      value: `${props.profit.profit_factor ? props.profit.profit_factor.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: 'Max Drawdown',\n      value: `${props.profit.max_drawdown ? formatPercent(props.profit.max_drawdown, 2) : 'N/A'} (${\n        props.profit.max_drawdown_abs\n          ? formatPriceCurrency(\n              props.profit.max_drawdown_abs,\n              props.stakeCurrency,\n              props.stakeCurrencyDecimals,\n            )\n          : 'N/A'\n      }) ${\n        props.profit.max_drawdown_start_timestamp && props.profit.max_drawdown_end_timestamp\n          ? 'from ' +\n            timestampms(props.profit.max_drawdown_start_timestamp) +\n            ' to ' +\n            timestampms(props.profit.max_drawdown_end_timestamp)\n          : ''\n      }`,\n    },\n  ];\n});\n</script>\n","<template>\n  <div v-if=\"botStore.activeBot.botState\">\n    <p>\n      Running Freqtrade <strong>{{ botStore.activeBot.version }}</strong>\n    </p>\n    <p>\n      Running with\n      <strong>\n        {{ botStore.activeBot.botState.max_open_trades }}x{{\n          botStore.activeBot.botState.stake_amount\n        }}\n        {{ botStore.activeBot.botState.stake_currency }}\n      </strong>\n      on\n      <strong>{{ botStore.activeBot.botState.exchange }}</strong> in\n      <strong>{{ botStore.activeBot.botState.trading_mode || 'spot' }}</strong> markets, with\n      Strategy <strong>{{ botStore.activeBot.botState.strategy }}</strong\n      >.\n    </p>\n    <p v-if=\"'stoploss_on_exchange' in botStore.activeBot.botState\">\n      Stoploss on exchange is\n      <strong>{{\n        botStore.activeBot.botState.stoploss_on_exchange ? 'enabled' : 'disabled'\n      }}</strong\n      >.\n    </p>\n    <p>\n      Currently <strong>{{ botStore.activeBot.botState.state }}</strong\n      >,\n      <strong>force entry: {{ botStore.activeBot.botState.force_entry_enable }}</strong>\n    </p>\n    <p>\n      <strong>{{ botStore.activeBot.botState.dry_run ? 'Dry-Run' : 'Live' }}</strong>\n    </p>\n    <hr />\n    <p>\n      Avg Profit {{ formatPercent(botStore.activeBot.profit.profit_all_ratio_mean) }} (&sum;\n      {{ formatPercent(botStore.activeBot.profit.profit_all_ratio_sum) }}) in\n      {{ botStore.activeBot.profit.trade_count }} Trades, with an average duration of\n      {{ botStore.activeBot.profit.avg_duration }}. Best pair:\n      {{ botStore.activeBot.profit.best_pair }}.\n    </p>\n    <p v-if=\"botStore.activeBot.profit.first_trade_timestamp\">\n      <span v-if=\"botStore.activeBot.profit.bot_start_timestamp\" class=\"d-block\">\n        Bot start date:\n        <strong>\n          <DateTimeTZ :date=\"botStore.activeBot.profit.bot_start_timestamp\" show-timezone />\n        </strong>\n      </span>\n      <span class=\"d-block\">\n        First trade opened:\n        <strong>\n          <DateTimeTZ :date=\"botStore.activeBot.profit.first_trade_timestamp\" show-timezone />\n        </strong>\n      </span>\n      <span class=\"d-block\">\n        Last trade opened:\n        <strong>\n          <DateTimeTZ :date=\"botStore.activeBot.profit.latest_trade_timestamp\" show-timezone />\n        </strong>\n      </span>\n    </p>\n    <p>\n      <span v-if=\"botStore.activeBot.profit.profit_factor\" class=\"d-block\">\n        Profit factor:\n        {{ botStore.activeBot.profit.profit_factor.toFixed(2) }}\n      </span>\n      <span v-if=\"botStore.activeBot.profit.trading_volume\" class=\"d-block\">\n        Trading volume:\n        {{\n          formatPriceCurrency(\n            botStore.activeBot.profit.trading_volume,\n            botStore.activeBot.botState.stake_currency,\n            botStore.activeBot.botState.stake_currency_decimals ?? 3,\n          )\n        }}\n      </span>\n    </p>\n    <BotProfit\n      class=\"mx-1\"\n      :profit=\"botStore.activeBot.profit\"\n      :stake-currency=\"botStore.activeBot.botState.stake_currency\"\n      :stake-currency-decimals=\"botStore.activeBot.botState.stake_currency_decimals ?? 3\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport DateTimeTZ from '@/components/general/DateTimeTZ.vue';\nimport { formatPercent, formatPriceCurrency } from '@/shared/formatters';\n\nimport BotProfit from '@/components/ftbot/BotProfit.vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nconst botStore = useBotStore();\n</script>\n","<template>\n  <div>\n    <div class=\"mb-2\">\n      <label class=\"me-auto h3\">{{ hasWeekly ? 'Period' : 'Daily' }} Breakdown</label>\n      <b-button class=\"float-end\" size=\"sm\" @click=\"refreshSummary\">\n        <i-mdi-refresh />\n      </b-button>\n    </div>\n    <b-form-radio-group\n      v-if=\"hasWeekly\"\n      id=\"order-direction\"\n      v-model=\"periodicBreakdownPeriod\"\n      :options=\"periodicBreakdownSelections\"\n      name=\"radios-btn-default\"\n      size=\"sm\"\n      buttons\n      style=\"min-width: 10em\"\n      button-variant=\"outline-primary\"\n      @change=\"refreshSummary\"\n    ></b-form-radio-group>\n\n    <div class=\"ps-1\">\n      <TimePeriodChart\n        v-if=\"selectedStats\"\n        :daily-stats=\"selectedStatsSorted\"\n        :show-title=\"false\"\n      />\n    </div>\n    <div>\n      <b-table class=\"table-sm\" :items=\"selectedStats.data\" :fields=\"dailyFields\"> </b-table>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport TimePeriodChart from '@/components/charts/TimePeriodChart.vue';\nimport { formatPercent, formatPrice } from '@/shared/formatters';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { TableField } from 'bootstrap-vue-next';\nimport { computed, onMounted, ref } from 'vue';\n\nimport { TimeSummaryOptions } from '@/types';\n\nconst botStore = useBotStore();\n\nconst hasWeekly = computed(() => botStore.activeBot.botApiVersion >= 2.33);\n\nconst periodicBreakdownSelections = computed(() => {\n  const vals = [{ value: TimeSummaryOptions.daily, text: 'Days' }];\n  if (hasWeekly.value) {\n    vals.push({ value: TimeSummaryOptions.weekly, text: 'Weeks' });\n    vals.push({ value: TimeSummaryOptions.monthly, text: 'Months' });\n  }\n  return vals;\n});\nconst periodicBreakdownPeriod = ref<TimeSummaryOptions>(TimeSummaryOptions.daily);\n\nconst selectedStats = computed(() => {\n  switch (periodicBreakdownPeriod.value) {\n    case TimeSummaryOptions.weekly:\n      return botStore.activeBot.weeklyStats;\n    case TimeSummaryOptions.monthly:\n      return botStore.activeBot.monthlyStats;\n  }\n  return botStore.activeBot.dailyStats;\n});\n\nconst selectedStatsSorted = computed(() => {\n  // Sorted version for chart\n  return {\n    ...selectedStats.value,\n    data: selectedStats.value.data\n      ? Object.values(selectedStats.value.data).sort((a, b) => (a.date > b.date ? 1 : -1))\n      : [],\n  };\n});\n\nconst dailyFields = computed<TableField[]>(() => {\n  const res: TableField[] = [\n    { key: 'date', label: 'Day' },\n    {\n      key: 'abs_profit',\n      label: 'Profit',\n      formatter: (value: unknown) =>\n        formatPrice(value as number, botStore.activeBot.stakeCurrencyDecimals),\n    },\n    {\n      key: 'fiat_value',\n      label: `In ${botStore.activeBot.dailyStats.fiat_display_currency}`,\n      formatter: (value: unknown) => formatPrice(value as number, 2),\n    },\n    { key: 'trade_count', label: 'Trades' },\n  ];\n  if (botStore.activeBot.botApiVersion >= 2.16)\n    res.push({\n      key: 'rel_profit',\n      label: 'Profit%',\n      formatter: (value: unknown) => formatPercent(value as number, 2),\n    });\n  return res;\n});\n\nfunction refreshSummary() {\n  botStore.activeBot.getTimeSummary(periodicBreakdownPeriod.value);\n}\n\nonMounted(() => {\n  refreshSummary();\n});\n</script>\n","<template>\n  <div>\n    <div class=\"mb-2\">\n      <label class=\"me-auto h3\">Pair Locks</label>\n      <b-button class=\"float-end\" size=\"sm\" @click=\"botStore.activeBot.getLocks\">\n        <i-mdi-refresh />\n      </b-button>\n    </div>\n    <div>\n      <b-table class=\"table-sm\" :items=\"botStore.activeBot.activeLocks\" :fields=\"tableFields\">\n        <template #cell(actions)=\"row\">\n          <b-button\n            class=\"btn-xs ms-1\"\n            size=\"sm\"\n            title=\"Delete trade\"\n            @click=\"removePairLock(row.item as unknown as Lock)\"\n          >\n            <i-mdi-delete />\n          </b-button>\n        </template>\n      </b-table>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { timestampms } from '@/shared/formatters';\nimport { Lock } from '@/types';\n\nimport { showAlert } from '@/stores/alerts';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { TableField } from 'bootstrap-vue-next';\nconst botStore = useBotStore();\n\nconst tableFields: TableField[] = [\n  { key: 'pair', label: 'Pair' },\n  { key: 'lock_end_timestamp', label: 'Until', formatter: (value) => timestampms(value as number) },\n  { key: 'reason', label: 'Reason' },\n  { key: 'actions' },\n];\n\nconst removePairLock = (item: Lock) => {\n  console.log(item);\n  if (item.id !== undefined) {\n    botStore.activeBot.deleteLock(item.id);\n  } else {\n    showAlert('This Freqtrade version does not support deleting locks.');\n  }\n};\n</script>\n\n<style scoped></style>\n","<template>\n  <div>\n    <div class=\"mb-2\">\n      <h3>Performance</h3>\n    </div>\n    <b-table\n      class=\"table-sm\"\n      :items=\"botStore.activeBot.performanceStats\"\n      :fields=\"tableFields\"\n    ></b-table>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { formatPrice } from '@/shared/formatters';\nimport { computed } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { TableField } from 'bootstrap-vue-next';\n\nconst botStore = useBotStore();\nconst tableFields = computed<TableField[]>(() => {\n  return [\n    { key: 'pair', label: 'Pair' },\n    { key: 'profit', label: 'Profit %' },\n    {\n      key: 'profit_abs',\n      label: `Profit ${botStore.activeBot.botState?.stake_currency}`,\n      formatter: (v: unknown) => formatPrice(v as number, 5),\n    },\n    { key: 'count', label: 'Count' },\n  ];\n});\n</script>\n","<template>\n  <grid-layout\n    class=\"h-100 w-100\"\n    :row-height=\"50\"\n    :layout=\"gridLayoutData\"\n    :vertical-compact=\"false\"\n    :margin=\"[5, 5]\"\n    :responsive-layouts=\"responsiveGridLayouts\"\n    :is-resizable=\"!isLayoutLocked\"\n    :is-draggable=\"!isLayoutLocked\"\n    :responsive=\"true\"\n    :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\n    :col-num=\"12\"\n    @update:breakpoint=\"breakpointChanged\"\n  >\n    <template #default=\"{ gridItemProps }\">\n      <grid-item\n        v-if=\"gridLayoutMultiPane.h != 0\"\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutMultiPane.i\"\n        :x=\"gridLayoutMultiPane.x\"\n        :y=\"gridLayoutMultiPane.y\"\n        :w=\"gridLayoutMultiPane.w\"\n        :h=\"gridLayoutMultiPane.h\"\n        drag-allow-from=\".card-header\"\n      >\n        <DraggableContainer header=\"Multi Pane\">\n          <div class=\"mt-1 d-flex justify-content-center\">\n            <BotControls class=\"mt-1 mb-2\" />\n          </div>\n          <b-tabs content-class=\"mt-3\" class=\"mt-1\">\n            <b-tab title=\"Pairs combined\" active>\n              <PairSummary\n                :pairlist=\"botStore.activeBot.whitelist\"\n                :current-locks=\"botStore.activeBot.activeLocks\"\n                :trades=\"botStore.activeBot.openTrades\"\n              />\n            </b-tab>\n            <b-tab title=\"General\">\n              <BotStatus />\n            </b-tab>\n            <b-tab title=\"Performance\">\n              <BotPerformance class=\"performance-view\" />\n            </b-tab>\n            <b-tab title=\"Balance\" lazy>\n              <Balance />\n            </b-tab>\n            <b-tab title=\"Time Breakdown\" lazy>\n              <PeriodBreakdown />\n            </b-tab>\n\n            <b-tab title=\"Pairlist\" lazy>\n              <PairListLive />\n            </b-tab>\n            <b-tab title=\"Pair Locks\" lazy>\n              <PairLockList />\n            </b-tab>\n          </b-tabs>\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-if=\"gridLayoutOpenTrades.h != 0\"\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutOpenTrades.i\"\n        :x=\"gridLayoutOpenTrades.x\"\n        :y=\"gridLayoutOpenTrades.y\"\n        :w=\"gridLayoutOpenTrades.w\"\n        :h=\"gridLayoutOpenTrades.h\"\n        drag-allow-from=\".card-header\"\n      >\n        <DraggableContainer header=\"Open Trades\">\n          <TradeList\n            class=\"open-trades\"\n            :trades=\"botStore.activeBot.openTrades\"\n            title=\"Open trades\"\n            :active-trades=\"true\"\n            empty-text=\"Currently no open trades.\"\n          />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-if=\"gridLayoutTradeHistory.h != 0\"\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutTradeHistory.i\"\n        :x=\"gridLayoutTradeHistory.x\"\n        :y=\"gridLayoutTradeHistory.y\"\n        :w=\"gridLayoutTradeHistory.w\"\n        :h=\"gridLayoutTradeHistory.h\"\n        drag-allow-from=\".card-header\"\n      >\n        <DraggableContainer header=\"Closed Trades\">\n          <trade-list\n            class=\"trade-history\"\n            :trades=\"botStore.activeBot.closedTrades\"\n            title=\"Trade history\"\n            :show-filter=\"true\"\n            empty-text=\"No closed trades so far.\"\n          />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-if=\"\n          botStore.activeBot.detailTradeId &&\n          botStore.activeBot.tradeDetail &&\n          gridLayoutTradeDetail.h != 0\n        \"\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutTradeDetail.i\"\n        :x=\"gridLayoutTradeDetail.x\"\n        :y=\"gridLayoutTradeDetail.y\"\n        :w=\"gridLayoutTradeDetail.w\"\n        :h=\"gridLayoutTradeDetail.h\"\n        :min-h=\"4\"\n        drag-allow-from=\".card-header\"\n      >\n        <DraggableContainer header=\"Trade Detail\">\n          <TradeDetail\n            :trade=\"botStore.activeBot.tradeDetail\"\n            :stake-currency=\"botStore.activeBot.stakeCurrency\"\n          />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-if=\"gridLayoutTradeDetail.h != 0\"\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutChartView.i\"\n        :x=\"gridLayoutChartView.x\"\n        :y=\"gridLayoutChartView.y\"\n        :w=\"gridLayoutChartView.w\"\n        :h=\"gridLayoutChartView.h\"\n        :min-h=\"6\"\n        drag-allow-from=\".card-header\"\n      >\n        <DraggableContainer header=\"Chart\">\n          <CandleChartContainer\n            :available-pairs=\"botStore.activeBot.whitelist\"\n            :historic-view=\"!!false\"\n            :timeframe=\"botStore.activeBot.timeframe\"\n            :trades=\"botStore.activeBot.allTrades\"\n          >\n          </CandleChartContainer>\n        </DraggableContainer>\n      </grid-item>\n    </template>\n  </grid-layout>\n</template>\n\n<script setup lang=\"ts\">\nimport { GridItemData } from '@/types';\n\nimport Balance from '@/components/ftbot/BotBalance.vue';\nimport BotControls from '@/components/ftbot/BotControls.vue';\nimport BotStatus from '@/components/ftbot/BotStatus.vue';\nimport CandleChartContainer from '@/components/charts/CandleChartContainer.vue';\nimport PeriodBreakdown from '@/components/ftbot/PeriodBreakdown.vue';\nimport DraggableContainer from '@/components/layout/DraggableContainer.vue';\nimport PairListLive from '@/components/ftbot/PairListLive.vue';\nimport PairLockList from '@/components/ftbot/PairLockList.vue';\nimport PairSummary from '@/components/ftbot/PairSummary.vue';\nimport BotPerformance from '@/components/ftbot/BotPerformance.vue';\nimport TradeDetail from '@/components/ftbot/TradeDetail.vue';\nimport TradeList from '@/components/ftbot/TradeList.vue';\n\nimport { ref, computed } from 'vue';\nimport { useLayoutStore, findGridLayout, TradeLayout } from '@/stores/layout';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nconst botStore = useBotStore();\nconst layoutStore = useLayoutStore();\nconst currentBreakpoint = ref('');\n\nconst breakpointChanged = (newBreakpoint: string) => {\n  // console.log('breakpoint:', newBreakpoint);\n  currentBreakpoint.value = newBreakpoint;\n};\nconst isResizableLayout = computed(() =>\n  ['', 'sm', 'md', 'lg', 'xl'].includes(currentBreakpoint.value),\n);\nconst isLayoutLocked = computed(() => {\n  return layoutStore.layoutLocked || !isResizableLayout.value;\n});\nconst gridLayoutData = computed((): GridItemData[] => {\n  if (isResizableLayout.value) {\n    return layoutStore.tradingLayout;\n  }\n  return [...layoutStore.getTradingLayoutSm];\n});\n\nconst gridLayoutMultiPane = computed(() => {\n  return findGridLayout(gridLayoutData.value, TradeLayout.multiPane);\n});\n\nconst gridLayoutOpenTrades = computed(() => {\n  return findGridLayout(gridLayoutData.value, TradeLayout.openTrades);\n});\n\nconst gridLayoutTradeHistory = computed(() => {\n  return findGridLayout(gridLayoutData.value, TradeLayout.tradeHistory);\n});\n\nconst gridLayoutTradeDetail = computed(() => {\n  return findGridLayout(gridLayoutData.value, TradeLayout.tradeDetail);\n});\n\nconst gridLayoutChartView = computed(() => {\n  return findGridLayout(gridLayoutData.value, TradeLayout.chartView);\n});\n\nconst responsiveGridLayouts = computed(() => {\n  return {\n    sm: layoutStore.getTradingLayoutSm,\n  };\n});\n</script>\n\n<style scoped></style>\n"],"names":["botStore","useBotStore","form","ref","selectedPair","price","stakeAmount","leverage","ordertype","orderSide","OrderSides","enterTag","orderTypeOptions","orderSideOptions","model","computed","props","value","emit","checkFormValidity","_a","handleSubmit","payload","nextTick","resetForm","_b","_d","_c","_f","_e","_h","_g","handleEntry","inputSelect","bvModalEvt","forceEnter","msgBox","isRunning","handleStopBot","msg","handleStopBuy","handleReloadConfig","handleForceExit","profitFields","profitItems","formatPriceCurrency","formatPercent","timestampms","hasWeekly","periodicBreakdownSelections","vals","TimeSummaryOptions","periodicBreakdownPeriod","selectedStats","selectedStatsSorted","a","b","dailyFields","res","formatPrice","refreshSummary","onMounted","tableFields","removePairLock","item","showAlert","v","layoutStore","useLayoutStore","currentBreakpoint","breakpointChanged","newBreakpoint","isResizableLayout","isLayoutLocked","gridLayoutData","gridLayoutMultiPane","findGridLayout","TradeLayout","gridLayoutOpenTrades","gridLayoutTradeHistory","gridLayoutTradeDetail","gridLayoutChartView","responsiveGridLayouts"],"mappings":"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"}